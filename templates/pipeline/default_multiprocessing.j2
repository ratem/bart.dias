import multiprocessing as mp
from queue import Queue
import time

# Define the pipeline stages
{% for stage_num in range(1, stage_count+1) %}
def stage{{ stage_num }}_function(input_queue, output_queue):
    """Stage {{ stage_num }} of the pipeline"""
    while True:
        # Get item from input queue
        item = input_queue.get()
        if item is None:  # Termination signal
            output_queue.put(None)
            break
            
        # Process the item (original code from stage {{ stage_num }})
        {% if stage_num == 1 %}
        {{ stage1_body | indent(8) }}
        {% elif stage_num == 2 %}
        {{ stage2_body | indent(8) }}
        {% elif stage_num == 3 %}
        {{ stage3_body | indent(8) }}
        {% else %}
        result = process_stage{{ stage_num }}(item)
        {% endif %}
        
        # Put result in output queue
        output_queue.put(result)
{% endfor %}

def run_pipeline(input_data):
    """Run the pipeline with the given input data"""
    # Create queues for communication between stages
    queues = [mp.Queue() for _ in range({{ stage_count }}+1)]
    
    # Create processes for each stage
    processes = []
    for i in range({{ stage_count }}):
        p = mp.Process(target=stage{{ i+1 }}_function, 
                      args=(queues[i], queues[i+1]))
        processes.append(p)
        p.start()
    
    # Feed input data to the first stage
    for item in input_data:
        queues[0].put(item)
    
    # Send termination signal
    queues[0].put(None)
    
    # Collect results from the last stage
    results = []
    while True:
        result = queues[-1].get()
        if result is None:
            break
        results.append(result)
    
    # Wait for all processes to finish
    for p in processes:
        p.join()
    
    return results

if __name__ == '__main__':
    # Example usage
    input_data = {{ input_data }}
    results = run_pipeline(input_data)
    print(f"Results: {results}")

