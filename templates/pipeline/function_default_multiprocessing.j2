import multiprocessing as mp
from queue import Queue

def {{func_name}}_parallel({{func_args|join(', ')}}):
    """Parallel pipeline version of {{func_name}}."""
    {% for stage_num in range(1, stage_count+1) %}
    def stage{{stage_num}}_function(in_q, out_q):
        while True:
            item = in_q.get()
            if item is None:
                out_q.put(None)
                break
{% for line in stage_bodies[stage_num-1] %}
            {{ line }}
{% endfor %}
            out_q.put(item)
    {% endfor %}

    queues = [mp.Queue() for _ in range({{stage_count}} + 1)]
    procs = []

    {% for stage_num in range(1, stage_count+1) %}
    p = mp.Process(
        target=stage{{stage_num}}_function,
        args=(queues[{{stage_num-1}}], queues[{{stage_num}}])
    )
    p.start()
    procs.append(p)
    {% endfor %}

    for item in {{func_args[0]}}:
        queues[0].put(item)
    queues[0].put(None)

    results = []
    while True:
        out = queues[-1].get()
        if out is None:
            break
        results.append(out)

    for p in procs:
        p.join()
    return results

if __name__ == '__main__':
    print({{func_name}}_parallel({{func_args[0]}}))
